package generate

import (
	"bytes"
	"io"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	r := require.New(t)

	buf := new(bytes.Buffer)
	err := Generate("test", []Enum{
		{
			Name: "Status",
			Values: []Value{
				{Symbol: "OK", Value: `"ok"`, Pretty: "OK"},
				{Symbol: "Error", Value: `"error"`, Pretty: "Error"},
				{Symbol: "Unknown", Value: `"unknown"`, Pretty: "Error"},
			},
		},
	}, buf)
	r.NoError(err)
	b, err := io.ReadAll(buf)
	r.NoError(err)
	r.NotEmpty(b)

	r.Equal(`// Code generated by enumerator. DO NOT EDIT.

package test

import (
	"database/sql/driver"
	"fmt"
)

type Status struct {
	v
}

var (
	OK      = Status{"ok"}
	Error   = Status{"error"}
	Unknown = Status{"unknown"}
)

func (r Status) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	case 'v':
		switch r {
		case OK:
			fmt.Fprint(f, "OK")
		case Error:
			fmt.Fprint(f, "Error")
		case Unknown:
			fmt.Fprint(f, "Error")
		default:
			fmt.Fprint(f, "")
		}
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Status) String() string {
	return string(r.v)
}
func (r Status) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Status) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewStatus(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Status) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Status) Scan(__iNpUt__ any) error {
	s, err := NewStatus(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewStatus(__iNpUt__ string) (Status, error) {
	switch __iNpUt__ {
	case string("ok"):
		return OK, nil
	case string("error"):
		return Error, nil
	case string("unknown"):
		return Unknown, nil
	default:
		return Status{}, fmt.Errorf("invalid value for type 'Status': '%s'", __iNpUt__)
	}
}
`, string(b))
}
