// Code generated by enumerator. DO NOT EDIT.

package example

import (
	"database/sql/driver"
	"fmt"
)

type ProjectStatus struct {
	v projectStatusEnum
}

var (
	Success   = ProjectStatus{success}
	Failure   = ProjectStatus{failure}
	InBetween = ProjectStatus{inBetween}
	NotSure   = ProjectStatus{notSure}
)

func (r ProjectStatus) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	case 'v':
		switch r {
		case Success:
			fmt.Fprint(f, "Success")
		case Failure:
			fmt.Fprint(f, "Failure")
		case InBetween:
			fmt.Fprint(f, "In between")
		case NotSure:
			fmt.Fprint(f, "Not sure?")
		default:
			fmt.Fprint(f, "")
		}
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r ProjectStatus) String() string {
	return string(r.v)
}
func (r ProjectStatus) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *ProjectStatus) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewProjectStatus(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r ProjectStatus) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *ProjectStatus) Scan(__iNpUt__ any) error {
	s, err := NewProjectStatus(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewProjectStatus(__iNpUt__ string) (ProjectStatus, error) {
	switch __iNpUt__ {
	case string(success):
		return Success, nil
	case string(failure):
		return Failure, nil
	case string(inBetween):
		return InBetween, nil
	case string(notSure):
		return NotSure, nil
	default:
		return ProjectStatus{}, fmt.Errorf("invalid value for type 'ProjectStatus': '%s'", __iNpUt__)
	}
}

type SecondStatus struct {
	v secondStatusEnum
}

var (
	FirstValue  = SecondStatus{firstValue}
	SecondValue = SecondStatus{secondValue}
	ThirdValue  = SecondStatus{thirdValue}
)

func (r SecondStatus) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r SecondStatus) String() string {
	return string(r.v)
}
func (r SecondStatus) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *SecondStatus) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewSecondStatus(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r SecondStatus) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *SecondStatus) Scan(__iNpUt__ any) error {
	s, err := NewSecondStatus(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewSecondStatus(__iNpUt__ string) (SecondStatus, error) {
	switch __iNpUt__ {
	case string(firstValue):
		return FirstValue, nil
	case string(secondValue):
		return SecondValue, nil
	case string(thirdValue):
		return ThirdValue, nil
	default:
		return SecondStatus{}, fmt.Errorf("invalid value for type 'SecondStatus': '%s'", __iNpUt__)
	}
}
