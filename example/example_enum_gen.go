// Code generated by enumerator. DO NOT EDIT.

package example

import (
	"database/sql/driver"
	"fmt"
)

type ProjectStatus struct {
	v projectStatusEnum
}

var (
	Success   = ProjectStatus{success}
	Failure   = ProjectStatus{failure}
	InBetween = ProjectStatus{inBetween}
	NotSure   = ProjectStatus{notSure}
)

func (r ProjectStatus) String() string {
	return string(r.v)
}
func (r ProjectStatus) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *ProjectStatus) UnmarshalText(in []byte) error {
	s, err := NewProjectStatus(string(in))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r ProjectStatus) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *ProjectStatus) Scan(in any) error {
	s, err := NewProjectStatus(fmt.Sprint(in))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewProjectStatus(in string) (ProjectStatus, error) {
	switch in {
	case "success":
		return Success, nil
	case "failure":
		return Failure, nil
	case "inBetween":
		return InBetween, nil
	case "notSure":
		return NotSure, nil
	default:
		return ProjectStatus{}, fmt.Errorf("invalid value for type 'ProjectStatus': '%s'", in)
	}
}
